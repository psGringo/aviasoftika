// post request handling of idHTTPServer example

procedure TDecodePostRequest.ReceiveFile(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; dir, FileNameOnServer: string);
const
  MaxReadBlockSize = 8192;
var
  ms: TMemoryStream;
  Boundary, BufferStr, AllContent: Ansistring;
  Header: TStringList;
  ByteToRead, ReadedBytes, RSize: Integer;
  Buffer: PAnsiChar;
  Data: Ansistring;
  HList: TStrings;
  outStream: TFileStream;
  UploadPath: string;
begin
  AResponseInfo.Server := 'ver1';
  AResponseInfo.CacheControl := 'no-cache';

//  if ARequestInfo.Host = FIP then // '40.85.142.196:40000') then
  begin
   // if(ARequestInfo.Document = '/index.php')  then
    begin
      if (Pos('multipart/form-data', LowerCase(ARequestInfo.ContentType)) > 0) and     // äàëåå èä¸ò îáðàáîòêà multipart
        (Pos('boundary', LowerCase(ARequestInfo.ContentType)) > 0) then
      begin
        Header := TStringList.Create;
        try
          ExtractHeaderFields([';'], [' '], PChar(ARequestInfo.ContentType), Header, False, False);
          Boundary := Header.Values['boundary'];
        finally
          Header.Free;
        end;
        ms := TMemoryStream.Create;
        try
          ms.LoadFromStream(ARequestInfo.PostStream);
          AllContent := '';
          ByteToRead := ARequestInfo.ContentLength;
          try
            while ByteToRead > 0 do
            begin
              RSize := MaxReadBlockSize;
              if RSize > ByteToRead then
                RSize := ByteToRead;
              GetMem(Buffer, RSize);
              try
                ReadedBytes := ms.Read(Buffer^, RSize);
                SetString(BufferStr, Buffer, ReadedBytes);
                AllContent := AllContent + BufferStr;
              finally
                FreeMem(Buffer, RSize);
              end;
              ByteToRead := ARequestInfo.ContentLength - Length(AllContent);
            end;
          //  AResponseInfo.ContentText := 'ok';
          //  AResponseInfo.WriteContent;
          except
            on E: Exception do
            begin
             // AResponseInfo.ContentText := E.Message;
             // AResponseInfo.WriteContent;
            end;
          end;
        finally
          ms.Free;
        end;

        if ARequestInfo.ContentLength = Length(AllContent) then
          while Length(AllContent) > Length('--' + Boundary + '--' + #13#10) do
          begin
            Header := TStringList.Create;
            HList := TStringList.Create;
            try
              AllContent := ReadMultipartRequest('--' + Boundary, AllContent, Header, Data);
              ExtractHeaderFields([';'], [' '], PChar(Header.Values['Content-Disposition']), HList, False, True);
              if (Header.Values['Content-Type'] <> '') and (Data <> '') and (HList.Values['filename'] <> '') // << corrected here
                then
              begin
                UploadPath := '';
                if dir <> '' then
                begin
                 //Check if dir exists and create it if not
                  if not TDirectory.Exists(ExtractFileDir(Application.ExeName) + '\' + dir) then
                    TDirectory.CreateDirectory(ExtractFileDir(Application.ExeName) + '\' + dir);
                  UploadPath := ExtractFileDir(Application.ExeName) + '\' + dir + '\';
                  outStream := TFileStream.Create(UploadPath + FileNameOnServer, fmCreate);
                 //ExtractFileName(HList.Values['filename']), fmCreate);
                end;
                try
                  try
                    outStream.WriteBuffer(Pointer(Data)^, Length(Data));
                    {
                    if PS_HTTPFileServerAddon_UnitVar.EnableLogging then
                    begin
                      if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo3) then
                        PS_HTTPFileServerAddon_UnitVar.mmo3.Lines.Add('File Successfully Uploaded');
                    end;
                    }
                  except
                    on E: EStreamError do
                    begin
                      raise Exception.Create('This is EStreamError EClassName' + E.ClassName + ' ' + 'EMessage ' + E.Message);
                      //AResponseInfo.ContentText := E.Message;
                      //AResponseInfo.WriteContent;
                    end;
                    on E: Exception do
                    begin
                      raise Exception.Create(E.ClassName + ' Exception Raised : ' + #13#10 + #13#10 + E.Message);
                      //AResponseInfo.ContentText := E.Message;
                      //AResponseInfo.WriteContent;
                    end;
                  end;
                finally
                  outStream.Free;
                end
              end

              else
              begin
               { logging
                if PS_HTTPFileServerAddon_UnitVar.EnableLogging then
                begin
                  if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo3) then
                    PS_HTTPFileServerAddon_UnitVar.mmo3.Lines.Add(Format('<p>Field <b>%s</b> = %s', [HList.Values['name'], Data]));
                end;
               }
              end;
            finally
             { logging
              if PS_HTTPFileServerAddon_UnitVar.EnableLogging then
              begin
                if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo1) then
                  PS_HTTPFileServerAddon_UnitVar.mmo1.Lines := Header;
                if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo2) then
                  PS_HTTPFileServerAddon_UnitVar.mmo2.Lines := HList;
              end;
              }
              Header.Free;
              HList.Free;
            end;
          end;
      end;

      if (Pos('application/x-www-form-urlencoded', LowerCase(ARequestInfo.ContentType)) > 0) then
      begin
        ms := TMemoryStream.Create;
        try
          ms.LoadFromStream(ARequestInfo.PostStream);

          AllContent := '';
          ByteToRead := ARequestInfo.ContentLength;

          try
            while ByteToRead > 0 do
            begin
              RSize := MaxReadBlockSize;
              if RSize > ByteToRead then
                RSize := ByteToRead;
              GetMem(Buffer, RSize);
              try
                ReadedBytes := ms.Read(Buffer^, RSize);
                SetString(BufferStr, Buffer, ReadedBytes);
                AllContent := AllContent + BufferStr;
              finally
                FreeMem(Buffer, RSize);
              end;
              ByteToRead := ARequestInfo.ContentLength - Length(AllContent);
            end;

          //  AResponseInfo.ContentText := 'ok';
          //  AResponseInfo.WriteContent;
          except

            on E: EStreamError do

            begin
              raise Exception.Create('This is EStreamError EClassName' + E.ClassName + ' ' + 'EMessage ' + E.Message);
              //AResponseInfo.ContentText := E.Message;
              //AResponseInfo.WriteContent;
            end;
            on E: Exception do
            begin
              raise Exception.Create(E.ClassName + ' Exception Raised : ' + #13#10 + #13#10 + E.Message);
              //AResponseInfo.ContentText := E.Message;
              //AResponseInfo.WriteContent;
            end;
          end;
        finally
          ms.Free;
        end;
        QueryPreParsing(AllContent, Params);
        QueryParsing(Params, Query.params, Query.values);
        {
        if PS_HTTPFileServerAddon_UnitVar.EnableLogging then
        begin
          if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo1) then
            PS_HTTPFileServerAddon_UnitVar.mmo1.Lines := Query.params;
          if Assigned(PS_HTTPFileServerAddon_UnitVar.mmo2) then
            PS_HTTPFileServerAddon_UnitVar.mmo2.Lines := Query.values;
        end;
        }
      end;

    end;
  end;

end;
